{
	"info": {
		"_postman_id": "9bd17e4c-a072-4987-a4d1-b01cdf2537e5",
		"name": "INTERNSHIP-API-TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27481029"
	},
	"item": [
		{
			"name": "LOGIN INTO KEYCLOAK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
							"pm.environment.set(\"access_token\", jsonData.access_token);",
							"pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
							"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
							"",
							"//Tests",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Access token should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.access_token).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Token type is present and valid\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.token_type).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Session state is present and in the expected format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.session_state).to.exist;",
							"    pm.expect(responseData.session_state).to.be.a('string');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{kc_client_id}}",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{kc_url}}/realms/InternshipUCB/protocol/openid-connect/token",
					"host": [
						"{{kc_url}}"
					],
					"path": [
						"realms",
						"InternshipUCB",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET DATA ESTUDIANTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    const jsonData = pm.response.json();",
							"     pm.expect(jsonData.code).to.eqls(\"200\")",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response schema is as expected\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.have.property(\"code\");",
							"    pm.expect(responseData).to.have.property(\"response\").that.is.an(\"object\");",
							"    pm.expect(responseData.response).to.have.property(\"idUsuarios\");",
							"    pm.expect(responseData.response).to.have.property(\"kc_UUID\");",
							"    pm.expect(responseData.response).to.have.property(\"correo\");",
							"    pm.expect(responseData.response).to.have.property(\"fechaRegistro\");",
							"    pm.expect(responseData.response).to.have.property(\"horaRegistro\");",
							"    pm.expect(responseData.response).to.have.property(\"idRoles\");",
							"    pm.expect(responseData.response).to.have.property(\"idPersonas\");",
							"    pm.expect(responseData.response).to.have.property(\"idCarreras\");",
							"    pm.expect(responseData.response).to.have.property(\"persona\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"idPersona\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"nombre\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"apellidoPaterno\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"apellidoMaterno\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"telefono\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"ci\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"fotoPerfil\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"bannerPerfil\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"anioIngresoUniversidad\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"descripcion\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"habilidades\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona.habilidades).to.have.property(\"habilidades\").that.is.an(\"array\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"habilidadesSeleccionada\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"experiencia\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona.experiencia).to.have.property(\"experiencia\").that.is.an(\"array\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"fechaDeNacimiento\");",
							"    pm.expect(responseData.response.persona).to.have.property(\"redesSociales\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona.redesSociales).to.have.property(\"twitter\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona.redesSociales).to.have.property(\"facebook\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona.redesSociales).to.have.property(\"linkedin\").that.is.an(\"object\");",
							"    pm.expect(responseData.response.persona.redesSociales).to.have.property(\"instagram\").that.is.an(\"object\");",
							"});",
							"",
							"",
							"pm.test(\"Presence of Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response contains errorMessage attribute\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"errorMessage\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api/v1/estudiante/{{kc_uuid_estudiante}}",
					"host": [
						"{{url}}api"
					],
					"path": [
						"v1",
						"estudiante",
						"{{kc_uuid_estudiante}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT DATA ESTUDIANTE",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomYear = Math.floor(Math.random() * (2023 - 2000)) + 2000;",
							"pm.environment.set(\"test-random-year\", randomYear);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    const jsonData = pm.response.json();",
							"     pm.expect(jsonData.code).to.eqls(\"200\")",
							"});",
							"",
							"",
							"pm.test(\"Year has changed\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(parseInt(jsonData.response.anioIngresoUniversidad)).to.eql(parseInt(pm.environment.get(\"test-random-year\")));",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response data length is greater than zero\", function () {",
							"    const responseData = pm.response.json().response;",
							"    pm.expect(Object.keys(responseData).length).to.be.greaterThan(0, \"Response data should not be empty\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"pm.test(\"Response schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      code: { type: \"string\" },",
							"      response: {",
							"        type: \"object\",",
							"        properties: {",
							"          idPersona: { type: \"number\" },",
							"          nombre: { type: \"string\" },",
							"          apellidoPaterno: { type: \"string\" },",
							"          apellidoMaterno: { type: \"string\" },",
							"          telefono: { type: \"number\" },",
							"          ci: { type: \"string\" },",
							"          fotoPerfil: { type: [\"string\", \"null\"] },",
							"          bannerPerfil: { type: [\"string\", \"null\"] },",
							"          anioIngresoUniversidad: { type: \"number\" },",
							"          descripcion: { type: \"string\" },",
							"          habilidades: { type: \"string\" },",
							"          habilidadesSeleccionada: { type: \"string\" },",
							"          experiencia: { type: \"string\" },",
							"          fechaDeNacimiento: { type: \"string\" },",
							"          redesSociales: { type: \"string\" }",
							"        },",
							"        required: [\"idPersona\", \"nombre\", \"apellidoPaterno\", \"apellidoMaterno\", \"telefono\", \"ci\", \"anioIngresoUniversidad\", \"descripcion\", \"habilidades\", \"habilidadesSeleccionada\", \"experiencia\", \"fechaDeNacimiento\", \"redesSociales\"]",
							"      },",
							"      errorMessage: { type: \"string\" }",
							"    },",
							"    required: [\"code\", \"response\", \"errorMessage\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"All IDs in the response are valid\", function () {",
							"    const response = pm.response.json().response;",
							"  ",
							"    // Validating the ID fields",
							"    pm.expect(response.idPersona).to.be.a('number').and.to.be.at.least(0, \"idPersona should not be negative\");",
							"    pm.expect(response.telefono).to.be.a('number').and.to.be.at.least(0, \"telefono should not be negative\")",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\": \"Estudiante Test\",\n    \"apellidoPaterno\": \"Automatización\",\n    \"apellidoMaterno\": \"Prueba\",\n    \"telefono\": 978768766,\n    \"ci\": \"6756576\",\n    \"fotoPerfil\": \"http://imgfz.com/i/dMyF894.png\",\n    \"bannerPerfil\": \"http://imgfz.com/i/sgXW19O.png\",\n    \"anioIngresoUniversidad\": {{test-random-year}},\n    \"descripcion\": \"Estudiante de prueba\",\n    \"habilidades\": \"{\\\"habilidades\\\":[{\\\"nivel\\\":3,\\\"habilidad\\\":\\\"Administracion de tiempo\\\",\\\"principal\\\":false},{\\\"nivel\\\":4,\\\"habilidad\\\":\\\"Comunicacion\\\",\\\"principal\\\":false},{\\\"nivel\\\":4,\\\"habilidad\\\":\\\"Adaptabilidad\\\",\\\"principal\\\":false},{\\\"nivel\\\":4,\\\"habilidad\\\":\\\"Resolucion de problemas\\\",\\\"principal\\\":false},{\\\"nivel\\\":5,\\\"habilidad\\\":\\\"Trabajo en equipo\\\",\\\"principal\\\":false},{\\\"nivel\\\":4,\\\"habilidad\\\":\\\"Creatividad\\\",\\\"principal\\\":false},{\\\"nivel\\\":4,\\\"habilidad\\\":\\\"Liderazgo\\\",\\\"principal\\\":false},{\\\"nivel\\\":5,\\\"habilidad\\\":\\\"Habilidades interpersonales\\\",\\\"principal\\\":false},{\\\"nivel\\\":4,\\\"habilidad\\\":\\\"Etica de trabajo\\\",\\\"principal\\\":false},{\\\"nivel\\\":4,\\\"habilidad\\\":\\\"Atencion al detalle\\\",\\\"principal\\\":false},{\\\"nivel\\\":5,\\\"habilidad\\\":\\\"Tecnología\\\",\\\"principal\\\":true}]}\",\n    \"habilidadesSeleccionada\": \"{\\\"habilidades_seleccionadas\\\":\\\"{\\\\\\\"habilidades_seleccionadas\\\\\\\":[\\\\\\\"Tecnología\\\\\\\"]}\\\"}\",\n    \"experiencia\": \"{\\\"experiencia\\\":[]}\",\n    \"fechaDeNacimiento\": \"2002-12-05\",\n    \"redesSociales\": \"{\\\"twitter\\\":{\\\"url\\\":\\\"\\\"},\\\"facebook\\\":{\\\"url\\\":\\\"\\\"},\\\"linkedin\\\":{\\\"url\\\":\\\"\\\"},\\\"instagram\\\":{\\\"url\\\":\\\"\\\"}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}api/v1/estudiante/{{kc_uuid_estudiante}}",
					"host": [
						"{{url}}api"
					],
					"path": [
						"v1",
						"estudiante",
						"{{kc_uuid_estudiante}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST CURRICULUM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Save the idCurriculums from the response in an environment variable\r",
							"pm.test(\"Save idCurriculums in environment variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"idCurriculums\", jsonData.response.idCurriculums);\r",
							"});\r",
							"\r",
							"//tests\r",
							"\r",
							"pm.test(\"Verify that the HTTP request method is POST\", function () {\r",
							"    pm.expect(pm.request.method).to.equal(\"POST\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response object contains the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.response).to.be.an('object');\r",
							"  pm.expect(responseData.response).to.have.property('idCurriculums');\r",
							"  pm.expect(responseData.response).to.have.property('idUsuarios');\r",
							"  pm.expect(responseData.response).to.have.property('fechaCreacion');\r",
							"  pm.expect(responseData.response).to.have.property('titulo');\r",
							"  pm.expect(responseData.response).to.have.property('pdfCurriculum');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "CV_PRUEBA.pdf"
						}
					]
				},
				"url": {
					"raw": "{{url}}api/v1/estudiante/{{kc_uuid_estudiante}}/curriculum",
					"host": [
						"{{url}}api"
					],
					"path": [
						"v1",
						"estudiante",
						"{{kc_uuid_estudiante}}",
						"curriculum"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET CURRICULUMS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.response).to.be.an('array');\r",
							"    \r",
							"    responseData.response.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('idCurriculums');\r",
							"        pm.expect(item).to.have.property('idUsuarios');\r",
							"        pm.expect(item).to.have.property('fechaCreacion');\r",
							"        pm.expect(item).to.have.property('titulo');\r",
							"        pm.expect(item).to.have.property('pdfCurriculum');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Code is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IdCurriculums and idUsuarios are non-negative integers\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  \r",
							"  responseData.response.forEach(function(item) {\r",
							"    pm.expect(item.idCurriculums).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(item.idUsuarios).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PdfCurriculum is a valid URL or file path\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.response).to.be.an('array');\r",
							"  responseData.response.forEach(function(item) {\r",
							"    pm.expect(item.pdfCurriculum).to.match(/^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i, \"PdfCurriculum should be a valid URL\");\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}api/v1/estudiante/{{kc_uuid_estudiante}}/curruculum",
					"host": [
						"{{url}}api"
					],
					"path": [
						"v1",
						"estudiante",
						"{{kc_uuid_estudiante}}",
						"curruculum"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE CURRICULUM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within the acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response schema is as expected\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('code');\r",
							"    pm.expect(responseData.response).to.be.an('object');\r",
							"    pm.expect(responseData.response).to.have.property('idCurriculums');\r",
							"    pm.expect(responseData.response).to.have.property('idUsuarios');\r",
							"    pm.expect(responseData.response).to.have.property('fechaCreacion');\r",
							"    pm.expect(responseData.response).to.have.property('titulo');\r",
							"    pm.expect(responseData.response).to.have.property('pdfCurriculum');\r",
							"    pm.expect(responseData).to.have.property('errorMessage');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of Content-Type header in the response\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"ID field in the response is a number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.response.idCurriculums).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id matches the ID sent\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.response.idCurriculums).to.equal(pm.environment.get('idCurriculums'))\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}api/v1/estudiante/{{kc_uuid_estudiante}}/curriculum/{{idCurriculums}}",
					"host": [
						"{{url}}api"
					],
					"path": [
						"v1",
						"estudiante",
						"{{kc_uuid_estudiante}}",
						"curriculum",
						"{{idCurriculums}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		}
	]
}